name: aksens-platform

on:
  push:
    branches:
      - '*'
jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Start build job'
        run: |
          echo "Starting the build job"

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Login to Dockerhub'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 'Build and push'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/aksens .
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/aksens

      - name: 'Write config'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/oci_api_key.pem
          echo "${{secrets.OCI_KEY_PUBLIC}}" >> ~/.oci/oci_api_key_public.pem

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem

      - name: 'Check Existing Instance'
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name aksens-platform \
            --query "data [0].id" \
            --raw-output \
            )" >> $GITHUB_ENV

      - name: 'Create Instance'
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
            -c ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --shape-config '{"memoryInGBs": 1, "ocpus": 1}' \
            --assign-public-ip true \
            --display-name aksens-platform \
            --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            --ssh-authorized-keys-file /home/runner/.oci/oci_api_key_public.pem \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
            )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}
      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          sleep 5
          echo "SSH not available..."
          done; echo "SSH ready!"

      - name: 'Deploy Deployment Configuration'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.OCI_KEY_FILE }}
          source: "docker-compose.yml"
          target: "./"

      - name: 'install LAMP'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.OCI_KEY_FILE}}
          script: |
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm
            sudo yum -y install yum-utils
            sudo yum-config-manager --enable remi-php74
            sudo yum update -y
            sudo yum install -y php php-cli
            sudo yum install -y php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-fpm
            sudo php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            sudo php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            sudo php composer-setup.php
            sudo php -r "unlink('composer-setup.php');"
            sudo sudo mv composer.phar /usr/local/bin/composer
            sudo php -v
            sudo composer -V
            sudo curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            sudo sudo yum install -y nodejs
            sudo yum remove -y git*
            sudo yum install -y https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm
            sudo yum install -y git
            sudo rpm -Uvh https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm
            sudo sed -i 's/enabled=1/enabled=0/' /etc/yum.repos.d/mysql-community.repo
            sudo yum --enablerepo=mysql80-community install -y mysql-community-server
            sudo systemctl start mysqld
            sudo grep "A temporary password" /var/log/mysqld.log
            sudo mysql_secure_installation
            sudo mysql -u root -p
            sudo CREATE DATABASE aksens;
            sudo create user 'root'@'%' identified by 'root';
            sudo GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
            sudo SET GLOBAL validate_password.policy=LOW;
            sudo exit;
            sudo systemctl restart mysqld
            sudo yum install -y install python3-devel gcc augeas-libs openssl-devel libffi-devel \ redhat-rpm-config ca-certificates openssl
            sudo cd /home/$USER
            sudo git clone https://github.com/certbot/certbot
            sudo cd certbot
            sudo python tools/venv3.py
            sudo source venv3/bin/activate

      - name: 'Running Docker Compose'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.OCI_KEY_FILE}}
          script: |
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl restart docker
            sudo firewall-cmd --zone=docker --add-service=http --permanent
            sudo firewall-cmd --reload
            sudo pip3 install docker-compose
            sudo /usr/local/bin/docker-compose up -d
